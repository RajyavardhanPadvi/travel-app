generator client {
    provider = "prisma-client-js"
}
datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

//Users
model User {
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
    username      String?         @unique
    name          String?
    email         String?         @unique
    emailVerified DateTime?
    password      String?
    isAdmin       Boolean         @default(false)
    image         String?
    accounts      Account[]
    sessions      Session[]
    authenticators Authenticator[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    reservations  Reservation[]
    reviews       Review[]
}

//Travel
model Listing {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    location      String
    type          String
    desc          String
    pricePerNight Float
    beds          Int
    hasFreeWifi   Boolean
    imageUrls     String[]

    reviews      Review[]
    reservations Reservation[]
}
model Flight {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  flightNumber      String      @unique
  airline           String
  duration          Int?
  type              String
  planetype         String
  desc              String
  price             Int
  departure         String
  arrival           String
  departureAt       String
  arrivalAt         String
  imageUrls         String[]
  seats             Int
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  reviews           Review[]
  reservations      Reservation[]
}

//Misc
model Reservation {
    id             String   @id @default(auto()) @map("_id") @db.ObjectId
    startDate      DateTime
    endDate        DateTime
    chargeId       String
    daysDifference Int
    reservedDates  Int[]    @default([])
    ReservationPrice Int

    listingId String @db.ObjectId
    flightId  String @db.ObjectId
    userId    String @db.ObjectId

    listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
    flight Flight @relation(fields: [flightId], references: [id], onDelete: Cascade)
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model Review {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    text String
    stars Int

    listingId String @db.ObjectId
    flightId String @db.ObjectId
    userId String @db.ObjectId

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
    flight Flight @relation(fields: [flightId], references: [id], onDelete:Cascade)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

}

//OAuth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}
model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}
model Authenticator {
    credentialID         String  @id @map("_id")
    userId               String  @db.ObjectId
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, credentialID])
}

//Itineraries
model Itinerary {
    id            String         @id @default(auto()) @map("_id") @db.ObjectId
    city          String
    desc          String
    budgetType    String
    daysType      Int
    details       Json
    createdAt     DateTime    @default(now())
    updatedAt     DateTime   @updatedAt
}
